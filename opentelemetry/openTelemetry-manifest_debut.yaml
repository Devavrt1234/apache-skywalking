apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: oteld
  labels:
    app: opentelemetry
spec:
  mode: daemonset
  serviceAccount: otelcontribcol
  image: otel/opentelemetry-collector-contrib:0.88.0
  ports:
    - name: prometheus
      port: 9090
      targetPort: 9090
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  volumeMounts:
    - mountPath: /var/log
      name: varlog
      readOnly: true
    - mountPath: /var/lib/docker/containers
      name: varlibdockercontainers
      readOnly: true
  volumes:
    - name: varlog
      hostPath:
        path: /var/log
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers
  config: |
    receivers:
      filelog:
        include:
          - /var/log/pods/*/*/*.log
        start_at: beginning
        include_file_path: true
        include_file_name: false
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: set-docker
                expr: 'body matches "^\\{"'
              - output: set-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: set-containerd
                expr: 'body matches "^[^ Z]+Z"'
           # Parse CRI-O format
          - type: add
            id: set-docker
            field: resource["container.runtime"]
            value: "docker"
          - type: add
            id: set-crio
            field: resource["container.runtime"]
            value: "crio"
          - type: add
            id: set-containerd
            field: resource["container.runtime"]
            value: "containerd"

      prometheus:
        config:
          scrape_configs:
          - job_name: "kubernetes-nodes"
            kubernetes_sd_configs:
            - role: node
            relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
    
    
          - job_name: "kubernetes-cadvisor"
            metrics_path: /metrics/cadvisor
            kubernetes_sd_configs:
              - role: node            
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
    
   
          - job_name: "kubernetes-service-endpoints"
            
            kubernetes_sd_configs:
              - role: endpoints
            
            relabel_configs:
             
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_service_name]
                action: replace
                target_label: service
    
  
          - job_name: "kubernetes-services"
            
            metrics_path: /probe
            params:
              module: [http_2xx]
            
            kubernetes_sd_configs:
              - role: service
            
            relabel_configs:
              # Example relabel to probe only some services that have "example.io/should_be_probed = true" annotation
              #  - source_labels: [__meta_kubernetes_service_annotation_example_io_should_be_probed]
              #    action: keep
              #    regex: true
              - source_labels: [__address__]
                target_label: __param_target
              - target_label: __address__
                replacement: blackbox-exporter.example.com:9115
              - source_labels: [__param_target]
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                target_label: namespace
              - source_labels: [__meta_kubernetes_service_name]
                target_label: service
    
          # Example scrape config for probing ingresses via the Blackbox Exporter.
          #
          # The relabeling allows the actual ingress scrape endpoint to be configured
          # for all or only some services.
          - job_name: "kubernetes-ingresses"
            
            metrics_path: /probe
            params:
              module: [http_2xx]
            
            kubernetes_sd_configs:
              - role: ingress
            
            relabel_configs:
              # Example relabel to probe only some ingresses that have "example.io/should_be_probed = true" annotation
              #  - source_labels: [__meta_kubernetes_ingress_annotation_example_io_should_be_probed]
              #    action: keep
              #    regex: true
              - source_labels:
                  [
                    __meta_kubernetes_ingress_scheme,
                    __address__,
                    __meta_kubernetes_ingress_path,
                  ]
                regex: (.+);(.+);(.+)
                replacement: ${1}://${2}${3}
                target_label: __param_target
              - target_label: __address__
                replacement: blackbox-exporter.example.com:9115
              - source_labels: [__param_target]
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_ingress_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                target_label: namespace
              - source_labels: [__meta_kubernetes_ingress_name]
                target_label: ingress
    
          # Example scrape config for pods
          #
          # The relabeling allows the actual pod scrape to be configured
          # for all the declared ports (or port-free target if none is declared)
          # or only some ports.
          - job_name: "kubernetes-pods"
            
            kubernetes_sd_configs:
              - role: pod
            
            relabel_configs:
              # Example relabel to scrape only pods that have
              # "example.io/should_be_scraped = true" annotation.
              #  - source_labels: [__meta_kubernetes_pod_annotation_example_io_should_be_scraped]
              #    action: keep
              #    regex: true
              #
              # Example relabel to customize metric path based on pod
              # "example.io/metric_path = <metric path>" annotation.
              #  - source_labels: [__meta_kubernetes_pod_annotation_example_io_metric_path]
              #    action: replace
              #    target_label: __metrics_path__
              #    regex: (.+)
              #
              # Example relabel to scrape only single, desired port for the pod
              # based on pod "example.io/scrape_port = <port>" annotation.
              #  - source_labels: [__address__, __meta_kubernetes_pod_annotation_example_io_scrape_port]
              #    action: replace
              #    regex: ([^:]+)(?::\d+)?;(\d+)
              #    replacement: $1:$2
              #    target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: pod
          - job_name: 'istiod-monitor'
            kubernetes_sd_configs:
              - role: endpoints
            relabel_configs:
              - source_labels: [ __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name ]
                action: keep
                regex: istiod;http-monitoring
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [ ]
                target_label: cluster
                replacement: skywalking-showcase
          - job_name: 'skywalking-so11y'
            metrics_path: '/metrics'
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels: [ __meta_kubernetes_pod_container_name, __meta_kubernetes_pod_container_port_name ]
                action: keep
                regex: oap;metrics # @feature: so11y; reference the name of the metrics port
              - source_labels: [ ]
                target_label: service
                replacement: oap-server
              - source_labels: [ __meta_kubernetes_pod_name ]
                target_label: host_name
                regex: (.+)
                replacement: $$1
          - job_name: 'vm-monitoring'
            metrics_path: '/metrics'
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels: [ __meta_kubernetes_pod_container_name, __meta_kubernetes_pod_container_port_name ]
                action: keep
                regex: vm;metrics # @feature: vm; reference the name of the metrics port
              - source_labels: [ __meta_kubernetes_pod_name ]
                target_label: host_name
                regex: (.+)
                replacement: $$1
          - job_name: kube-state-metrics
            metrics_path: /metrics
            kubernetes_sd_configs:
              - role: endpoints
            relabel_configs:
              - source_labels: [ __meta_kubernetes_service_label_app_kubernetes_io_name ]
                regex: kube-state-metrics
                replacement: $$1
                action: keep
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [ ]
                target_label: cluster
                replacement: skywalking-showcase
      otlp:
        protocols:
          grpc:
          http:


    processors:
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800

      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
           node_from_env_var: K8S_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
          # Pod labels which can be fetched via K8sattributeprocessor
          labels:
            - tag_name: key1
              key: label1
              from: pod
            - tag_name: key2
              key: label2
              from: pod
        # Pod association using resource attributes and connection
        pod_association:
          - sources:
             - from: resource_attribute
               name: k8s.pod.uid
             - from: resource_attribute
               name: k8s.pod.name
          - sources:
             - from: connection
      memory_limiter:
        check_interval: 1s
        limit_percentage: 70
        spike_limit_percentage: 30

      transform:
        log_statements:
          context: log
          statements:
            - merge_maps(cache,ExtractPatterns(attributes["log.file.path"],"^.*/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\\-]{36})/(?P<container_name>[^\\._]+)/(?P<restart_count>\\d+)\\.log$"), "upsert") where attributes["log.file.path"] != nil
            - set(resource.attributes["k8s.namespace"],cache["namespace"]) where cache["namespace"]!= nil
            - set(resource.attributes["k8s.pod.name"],cache["pod_name"]) where cache["pod_name"]!= nil
            - set(resource.attributes["k8s.pod.uid"],cache["uid"]) where cache["uid"]!= nil
            - set(resource.attributes["k8s.container.name"],cache["container_name"]) where cache["uid"]!= nil
      transform/docker:
        log_statements:
          context: log
          statements:
            - merge_maps(cache,ParseJSON(body), "upsert") where body!= nil
            - set(body,cache["log"]) where cache["log"] != nil
    
      transform/crio:
        log_statements:
          context: log
          statements:
            - merge_maps(cache,ExtractPatterns(body,"^(?P<time>[^Z]+)Z (?P<stream>stdout|stderr) (?P<logtag>[^\\s]*) ?(?P<log>.*)$"), "upsert") where body != nil
            - set(body,cache["log"]) where cache["log"] != nil      
      transform/containerd:
        log_statements:
          context: log
          statements:
            - merge_maps(cache,ExtractPatterns(body,"^(?P<time>[^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^\\s]*) ?(?P<log>.*)$"), "upsert") where body != nil
            - merge_maps(cache,ExtractPatterns(body,"^(?P<time>\\d+/\\d+/\\d+\\s+\\d+:\\d+\\d+) (?P<log>.*)$"), "upsert") where attributes["log_name"]!= "MeshAccessLog" and cache["log"]!= nil and not IsMap(cache["log"])
            - set(body,cache["log"]) where cache["log"] != nil
            - merge_maps(cache,ParseJSON(body), "upsert") where IsMap(body)
            - set(body,cache["message"]) where cache["message"] != nil
            - set(body,cache["msg"]) where cache["msg"] != nil
            - set(severity_text,cache["level"]) where cache["level"] != nil
            - set(severity_text,cache["severity"]) where cache["severity"] != nil
            - set(severity_number,SEVERITY_NUMBER_INFO) where cache["level"] == "INFO"
            - set(severity_number,SEVERITY_NUMBER_INFO) where cache["severity"] == "info"
            - set(attributes["loggerName"],cache["loggerName"]) where cache["loggerName"] != nil
    connectors:
      routing:
        default_pipelines:  [logs/default]
        error_mode: ignore
        table:
          - statement: route() where attributes["container.runtime"] == "crio"
            pipelines: [logs/crio]
          - statement: route() where attributes["container.runtime"] == "docker"
            pipelines: [logs/docker]
          - statement: route() where attributes["container.runtime"] == "containerd"
            pipelines: [logs/containerd]
    
    exporters:
      logging:
        verbosity: detailed
     
   
      otlp:
        endpoint: "skywalking-skywalking-helm-oap.skywalking:11800"
        tls:
          insecure: true
      skywalking:
        endpoint: "skywalking-skywalking-helm-oap.skywalking:11800"
        tls:
          insecure: true
        num_streams: 5
    
    
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter,k8sattributes,batch]
          exporters: [otlp]
        metrics:
          receivers: [otlp,prometheus]
          processors: [memory_limiter,k8sattributes,batch]
          exporters: [otlp]
        logs:
          receivers: [otlp,filelog]
          processors: [memory_limiter]
          exporters: [routing]
        logs/docker:
          receivers: [routing]
          processors: [transform, transform/docker,k8sattributes,batch]
          exporters: [skywalking]
        logs/crio:
          receivers: [routing]
          processors: [transform,transform/crio,k8sattributes,batch]
          exporters: [skywalking]
        logs/containerd:
          receivers: [routing]
          processors: [transform,transform/containerd,k8sattributes,batch]
          exporters: [skywalking]
        logs/default:
          receivers: [routing]
          processors: [k8sattributes,batch]
          exporters: [skywalking]